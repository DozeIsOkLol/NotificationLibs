--!/usr/bin/env lua
-- iOSNotifPrestigeSource.lua (Version 9.0 - Major Bug Fixes & Stability)
-- Corrects positioning, RichText, and swipe logic from the previous version.

local module = {}

-- Services
local TweenService = game:GetService("TweenService"); local TextService = game:GetService("TextService"); local UserInputService = game:GetService("UserInputService"); local CoreGui = game:GetService("CoreGui")

-- --- Configuration ---
local themes = { Light = { B = Color3.fromRGB(240, 240, 240), T = 0.25, P = Color3.fromRGB(15, 15, 15), S = Color3.fromRGB(120, 120, 120) }, Dark = { B = Color3.fromRGB(40, 40, 40), T = 0.3, P = Color3.fromRGB(240, 240, 240), S = Color3.fromRGB(160, 160, 160) }, Success = { B = Color3.fromRGB(60, 110, 75), T = 0.2, P = Color3.fromRGB(230, 255, 235), S = Color3.fromRGB(180, 220, 190) }, Warning = { B = Color3.fromRGB(120, 100, 50), T = 0.2, P = Color3.fromRGB(255, 245, 220), S = Color3.fromRGB(220, 200, 160) }, Error = { B = Color3.fromRGB(120, 55, 55), T = 0.2, P = Color3.fromRGB(255, 230, 230), S = Color3.fromRGB(220, 180, 180) }, Info = { B = Color3.fromRGB(50, 90, 120), T = 0.2, P = Color3.fromRGB(220, 235, 255), S = Color3.fromRGB(160, 190, 220) } }
local globalConfig = { Position = "TopCenter", RichText = false }; local NOTIFICATION_WIDTH = 350; local BASE_HEIGHT = 65; local PADDING = 12; local SPACING = 10; local TOP_PADDING = 20; local FONT = Enum.Font.SourceSans; local FONT_BOLD = Enum.Font.SourceSansBold; local DEFAULT_DURATION = 7; local SWIPE_THRESHOLD = 0.3

-- --- UI Template Creation ---
local NotifGui = CoreGui:FindFirstChild("iOSNotifGui"); if NotifGui then NotifGui:Destroy() end
NotifGui = Instance.new("ScreenGui"); NotifGui.Name = "iOSNotifGui"; NotifGui.ResetOnSpawn = false; NotifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; NotifGui.Parent = CoreGui
local NotificationTemplate = Instance.new("Frame"); NotificationTemplate.Name = "NotificationTemplate"; NotificationTemplate.Visible = false; NotificationTemplate.Size = UDim2.new(0, NOTIFICATION_WIDTH, 0, BASE_HEIGHT); NotificationTemplate.Parent = NotifGui
local UICorner = Instance.new("UICorner"); UICorner.CornerRadius = UDim.new(0, 24); UICorner.Parent = NotificationTemplate
local TitleLabel = Instance.new("TextLabel"); TitleLabel.Name = "TitleLabel"; TitleLabel.Font = FONT_BOLD; TitleLabel.TextXAlignment = Enum.TextXAlignment.Left; TitleLabel.TextYAlignment = Enum.TextYAlignment.Top; TitleLabel.TextSize = 15; TitleLabel.BackgroundTransparency = 1; TitleLabel.Position = UDim2.new(0, PADDING, 0, PADDING); TitleLabel.Size = UDim2.new(1, -(PADDING*2 + 40), 0, 18); TitleLabel.Parent = NotificationTemplate
local TimestampLabel = Instance.new("TextLabel"); TimestampLabel.Name = "TimestampLabel"; TimestampLabel.Font = FONT; TimestampLabel.TextXAlignment = Enum.TextXAlignment.Right; TimestampLabel.TextYAlignment = Enum.TextYAlignment.Top; TimestampLabel.TextSize = 14; TimestampLabel.BackgroundTransparency = 1; TimestampLabel.Position = UDim2.new(1, -PADDING - 40, 0, PADDING); TimestampLabel.Size = UDim2.new(0, 40, 0, 18); TimestampLabel.Parent = NotificationTemplate
local DescriptionLabel = Instance.new("TextLabel"); DescriptionLabel.Name = "DescriptionLabel"; DescriptionLabel.Font = FONT; DescriptionLabel.TextXAlignment = Enum.TextXAlignment.Left; DescriptionLabel.TextYAlignment = Enum.TextYAlignment.Top; DescriptionLabel.TextWrapped = true; DescriptionLabel.TextSize = 15; DescriptionLabel.BackgroundTransparency = 1; DescriptionLabel.Position = UDim2.new(0, PADDING, 0, PADDING + 18); DescriptionLabel.Size = UDim2.new(1, -PADDING * 2, 0, 0); DescriptionLabel.RichText = false; DescriptionLabel.Parent = NotificationTemplate

-- --- Core Logic ---
local activeNotifications = {}; local idToFrameMap = {}; local nextNotifId = 1
local positions = { TopCenter = { A = Vector2.new(0.5, 0), P = UDim2.new(0.5, 0, 0, 0), D = 1 }, TopLeft = { A = Vector2.new(0, 0), P = UDim2.new(0, PADDING, 0, 0), D = 1 }, TopRight = { A = Vector2.new(1, 0), P = UDim2.new(1, -PADDING, 0, 0), D = 1 }, BottomCenter = { A = Vector2.new(0.5, 1), P = UDim2.new(0.5, 0, 1, 0), D = -1 }, BottomLeft = { A = Vector2.new(0, 1), P = UDim2.new(0, PADDING, 1, 0), D = -1 }, BottomRight = { A = Vector2.new(1, 1), P = UDim2.new(1, -PADDING, 1, 0), D = -1 } }

local function calculateTextHeight(text, richText) local tempLabel = DescriptionLabel:Clone(); tempLabel.RichText = richText; local sizeVector = TextService:GetTextSize(text, tempLabel.TextSize, tempLabel.Font, Vector2.new(NOTIFICATION_WIDTH - PADDING*2, 1000)); tempLabel:Destroy(); return sizeVector.Y end
local function repositionAll() local posInfo = positions[globalConfig.Position] or positions.TopCenter; local currentY = TOP_PADDING * posInfo.D; for _, notifFrame in ipairs(activeNotifications) do TweenService:Create(notifFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, posInfo.P.Y.Scale, currentY) }):Play(); currentY = currentY + (notifFrame.AbsoluteSize.Y + SPACING) * posInfo.D end end
local function dismissNotification(notifFrame, swipeDirection) if not notifFrame or notifFrame:GetAttribute("IsDismissing") then return end; notifFrame:SetAttribute("IsDismissing", true); local id = notifFrame:GetAttribute("ID"); if id then idToFrameMap[id] = nil end; for i, v in ipairs(activeNotifications) do if v == notifFrame then table.remove(activeNotifications, i); break end end; repositionAll(); local posInfo = positions[globalConfig.Position] or positions.TopCenter; local exitX, exitY; if swipeDirection then exitX = UDim2.new(posInfo.P.X.Scale + (0.6 * swipeDirection), posInfo.P.X.Offset, posInfo.P.Y.Scale, notifFrame.Position.Y.Offset); else exitY = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, posInfo.P.Y.Scale, (-notifFrame.AbsoluteSize.Y - 20) * posInfo.D); end; local slideOut = TweenService:Create(notifFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In), { Position = exitX or exitY }); slideOut:Play(); slideOut.Completed:Wait(); notifFrame:Destroy() end

function module.Notify(data)
    if typeof(data) ~= "table" then warn("iOSNotif Error: Notify data must be a table."); return end
    local newNotif = NotificationTemplate:Clone(); local notifId = nextNotifId; nextNotifId += 1; newNotif:SetAttribute("ID", notifId)
    local posInfo = positions[globalConfig.Position] or positions.TopCenter; newNotif.AnchorPoint = posInfo.A
    local themeName = data.Theme or globalConfig.Theme or "Light"; local theme = themes[themeName] or themes.Light; newNotif.BackgroundColor3 = theme.B; newNotif.BackgroundTransparency = theme.T; newNotif.TitleLabel.TextColor3 = theme.P; newNotif.DescriptionLabel.TextColor3 = theme.P; newNotif.TimestampLabel.TextColor3 = theme.S
    newNotif.TitleLabel.Text = data.Title or "Notification"; newNotif.DescriptionLabel.Text = data.Description or ""
    newNotif.TimestampLabel.Text = data.Timestamp or globalConfig.Timestamp or "now"; local useRichText = data.RichText or globalConfig.RichText or false; newNotif.DescriptionLabel.RichText = useRichText
    local duration = data.Duration or globalConfig.Duration or DEFAULT_DURATION
    local descriptionHeight = calculateTextHeight(newNotif.DescriptionLabel.Text, useRichText); local totalHeight = PADDING + 18 + descriptionHeight + PADDING; if totalHeight < BASE_HEIGHT then totalHeight = BASE_HEIGHT end; newNotif.DescriptionLabel.Size = UDim2.new(1, -PADDING*2, 0, descriptionHeight); newNotif.Size = UDim2.new(0, NOTIFICATION_WIDTH, 0, totalHeight); newNotif.Position = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, posInfo.P.Y.Scale, (-totalHeight - 20) * posInfo.D); newNotif.Parent = NotifGui; newNotif.Visible = true
    table.insert(activeNotifications, 1, newNotif); idToFrameMap[notifId] = newNotif; repositionAll()
    local isDragging = false; local startX, startPos; local mouseMoveConn, mouseUpConn
    newNotif.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then isDragging = true; startX = UserInputService:GetMouseLocation().X; startPos = notifFrame.Position.X.Offset; mouseMoveConn = UserInputService.InputChanged:Connect(function(moveInput) if moveInput.UserInputType == Enum.UserInputType.MouseMovement and isDragging then newNotif.Position = UDim2.new(posInfo.P.X.Scale, startPos + (UserInputService:GetMouseLocation().X - startX), newNotif.Position.Y.Scale, newNotif.Position.Y.Offset) end end); mouseUpConn = UserInputService.InputEnded:Connect(function(endInput) if endInput.UserInputType == Enum.UserInputType.MouseButton1 then isDragging = false; if mouseMoveConn then mouseMoveConn:Disconnect() end; if mouseUpConn then mouseUpConn:Disconnect() end; local totalDelta = UserInputService:GetMouseLocation().X - startX; if math.abs(totalDelta) / newNotif.AbsoluteSize.X > SWIPE_THRESHOLD then dismissNotification(newNotif, math.sign(totalDelta)) else TweenService:Create(newNotif, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, newNotif.Position.Y.Scale, newNotif.Position.Y.Offset) }):Play() end end end) end end)
    coroutine.wrap(function() wait(duration); if not newNotif:GetAttribute("IsDismissing") then dismissNotification(newNotif, nil) end end)()
    return notifId
end

function module.SetConfig(config) if typeof(config) == "table" then for key, value in pairs(config) do globalConfig[key] = value end else warn("iOSNotif Error: SetConfig data must be a table.") end end
function module.Update(id, data) local notifFrame = idToFrameMap[id]; if not notifFrame or typeof(data) ~= "table" then return end; if data.Title then notifFrame.TitleLabel.Text = data.Title end; if data.Description then notifFrame.DescriptionLabel.Text = data.Description end; if data.Timestamp then notifFrame.TimestampLabel.Text = data.Timestamp end; local useRichText = notifFrame.DescriptionLabel.RichText; if data.RichText ~= nil then useRichText = data.RichText; notifFrame.DescriptionLabel.RichText = useRichText end; if data.Theme then local theme = themes[data.Theme] or themes.Light; notifFrame.BackgroundColor3 = theme.B; notifFrame.BackgroundTransparency = theme.T; notifFrame.TitleLabel.TextColor3 = theme.P; notifFrame.DescriptionLabel.TextColor3 = theme.P; notifFrame.TimestampLabel.TextColor3 = theme.S end; if data.Description or data.RichText ~= nil then local descriptionHeight = calculateTextHeight(notifFrame.DescriptionLabel.Text, useRichText); local totalHeight = PADDING + 18 + descriptionHeight + PADDING; if totalHeight < BASE_HEIGHT then totalHeight = BASE_HEIGHT end; notifFrame.DescriptionLabel.Size = UDim2.new(1, -PADDING*2, 0, descriptionHeight); TweenService:Create(notifFrame, TweenInfo.new(0.3), { Size = UDim2.new(0, NOTIFICATION_WIDTH, 0, totalHeight) }):Play(); repositionAll() end end
function module.Dismiss(id) local notifFrame = idToFrameMap[id]; if notifFrame then dismissNotification(notifFrame, nil) end end

return module
