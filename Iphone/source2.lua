--!/usr/bin/env lua
-- iOSNotifFinal.lua (Version 13.0 - The Stable Master)
-- This version has been completely rewritten for stability and correctness. All known bugs are fixed.

local module = {}

-- Services
local TweenService, TextService, UserInputService, CoreGui = game:GetService("TweenService"), game:GetService("TextService"), game:GetService("UserInputService"), game:GetService("CoreGui")

-- --- Configuration ---
local themes = { Light = { B = Color3.fromRGB(240, 240, 240), T = 0.25, P = Color3.fromRGB(15, 15, 15), S = Color3.fromRGB(120, 120, 120) }, Dark = { B = Color3.fromRGB(40, 40, 40), T = 0.3, P = Color3.fromRGB(240, 240, 240), S = Color3.fromRGB(160, 160, 160) }, Success = { B = Color3.fromRGB(60, 110, 75), T = 0.2, P = Color3.fromRGB(230, 255, 235), S = Color3.fromRGB(180, 220, 190) }, Warning = { B = Color3.fromRGB(120, 100, 50), T = 0.2, P = Color3.fromRGB(255, 245, 220), S = Color3.fromRGB(220, 200, 160) }, Error = { B = Color3.fromRGB(120, 55, 55), T = 0.2, P = Color3.fromRGB(255, 230, 230), S = Color3.fromRGB(220, 180, 180) }, Info = { B = Color3.fromRGB(50, 90, 120), T = 0.2, P = Color3.fromRGB(220, 235, 255), S = Color3.fromRGB(160, 190, 220) } }
local globalConfig = { Position = "TopCenter", RichText = false, Animation = "Slide", Duration = 7 }; local NOTIFICATION_WIDTH = 350; local BASE_HEIGHT = 65; local PADDING = 12; local SPACING = 10; local TOP_PADDING = 20; local FONT = Enum.Font.SourceSans; local FONT_BOLD = Enum.Font.SourceSansBold; local SWIPE_THRESHOLD = 0.3; local HISTORY_MAX = 20

-- --- UI Template Creation ---
local NotifGui = CoreGui:FindFirstChild("iOSNotifGui"); if NotifGui then NotifGui:Destroy() end
NotifGui = Instance.new("ScreenGui"); NotifGui.Name = "iOSNotifGui"; NotifGui.ResetOnSpawn = false; NotifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; NotifGui.Parent = CoreGui
local NotificationTemplate = Instance.new("Frame"); NotificationTemplate.Name = "NotificationTemplate"; NotificationTemplate.Visible = false; NotificationTemplate.Size = UDim2.new(0, NOTIFICATION_WIDTH, 0, BASE_HEIGHT); NotificationTemplate.ClipsDescendants = true; NotificationTemplate.Parent = NotifGui
local UICorner = Instance.new("UICorner"); UICorner.CornerRadius = UDim.new(0, 24); UICorner.Parent = NotificationTemplate
local TitleLabel = Instance.new("TextLabel"); TitleLabel.Name = "TitleLabel"; TitleLabel.Font = FONT_BOLD; TitleLabel.TextXAlignment = Enum.TextXAlignment.Left; TitleLabel.TextYAlignment = Enum.TextYAlignment.Top; TitleLabel.TextSize = 15; TitleLabel.BackgroundTransparency = 1; TitleLabel.Position = UDim2.new(0, PADDING, 0, PADDING); TitleLabel.Size = UDim2.new(1, -(PADDING*2 + 40), 0, 18); TitleLabel.Parent = NotificationTemplate
local TimestampLabel = Instance.new("TextLabel"); TimestampLabel.Name = "TimestampLabel"; TimestampLabel.Font = FONT; TimestampLabel.TextXAlignment = Enum.TextXAlignment.Right; TimestampLabel.TextYAlignment = Enum.TextYAlignment.Top; TimestampLabel.TextSize = 14; TimestampLabel.BackgroundTransparency = 1; TimestampLabel.Position = UDim2.new(1, -PADDING - 40, 0, PADDING); TimestampLabel.Size = UDim2.new(0, 40, 0, 18); TimestampLabel.Parent = NotificationTemplate
local DescriptionLabel = Instance.new("TextLabel"); DescriptionLabel.Name = "DescriptionLabel"; DescriptionLabel.Font = FONT; DescriptionLabel.TextXAlignment = Enum.TextXAlignment.Left; DescriptionLabel.TextYAlignment = Enum.TextYAlignment.Top; DescriptionLabel.TextWrapped = true; DescriptionLabel.TextSize = 15; DescriptionLabel.BackgroundTransparency = 1; DescriptionLabel.Position = UDim2.new(0, PADDING, 0, PADDING + 18); DescriptionLabel.Size = UDim2.new(1, -PADDING * 2, 0, 0); DescriptionLabel.RichText = false; DescriptionLabel.Parent = NotificationTemplate
local Sound = Instance.new("Sound"); Sound.Name = "NotifSound"; Sound.Volume = 0.5; Sound.Parent = NotificationTemplate
local ProgressBar = Instance.new("Frame"); ProgressBar.Name = "ProgressBar"; ProgressBar.Visible = false; ProgressBar.Size = UDim2.new(1, 0, 0, 4); ProgressBar.Position = UDim2.new(0, 0, 1, -4); ProgressBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255); ProgressBar.BackgroundTransparency = 0.5; ProgressBar.BorderSizePixel = 0; ProgressBar.Parent = NotificationTemplate
local ProgressFill = Instance.new("Frame"); ProgressFill.Name = "ProgressFill"; ProgressFill.Size = UDim2.new(0, 0, 1, 0); ProgressFill.BackgroundColor3 = Color3.fromRGB(255, 255, 255); ProgressFill.BorderSizePixel = 0; ProgressFill.Parent = ProgressBar
local GroupBadge = Instance.new("Frame"); GroupBadge.Name = "GroupBadge"; GroupBadge.Visible = false; GroupBadge.AnchorPoint = Vector2.new(0.5, 0.5); GroupBadge.Size = UDim2.new(0, 50, 0, 20); GroupBadge.BackgroundColor3 = Color3.fromRGB(80, 80, 80); GroupBadge.BackgroundTransparency = 0.2; GroupBadge.Parent = NotificationTemplate
local GroupCorner = Instance.new("UICorner"); GroupCorner.CornerRadius = UDim.new(0, 10); GroupCorner.Parent = GroupBadge
local GroupText = Instance.new("TextLabel"); GroupText.Name = "GroupText"; GroupText.Size = UDim2.new(1, 0, 1, 0); GroupText.Font = FONT_BOLD; GroupText.TextSize = 14; GroupText.TextColor3 = Color3.fromRGB(255, 255, 255); GroupText.BackgroundTransparency = 1; GroupText.Parent = GroupBadge
local CenterFrame = Instance.new("Frame"); CenterFrame.Name = "NotificationCenter"; CenterFrame.Visible = false; CenterFrame.AnchorPoint = Vector2.new(1, 0); CenterFrame.Position = UDim2.new(1, 0, 0, 20); CenterFrame.Size = UDim2.new(0, 300, 0, 400); CenterFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30); CenterFrame.BackgroundTransparency = 0.2; CenterFrame.ClipsDescendants = true; CenterFrame.Parent = NotifGui
local CenterCorner = Instance.new("UICorner"); CenterCorner.CornerRadius = UDim.new(0, 12); CenterCorner.Parent = CenterFrame
local CenterTitle = Instance.new("TextLabel"); CenterTitle.Name = "Title"; CenterTitle.Size = UDim2.new(1, -10, 0, 30); CenterTitle.Position = UDim2.new(0, 5, 0, 0); CenterTitle.Font = FONT_BOLD; CenterTitle.Text = "Notification Center"; CenterTitle.TextColor3 = Color3.fromRGB(255, 255, 255); CenterTitle.TextXAlignment = Enum.TextXAlignment.Left; CenterTitle.TextSize = 18; CenterTitle.BackgroundTransparency = 1; CenterTitle.Parent = CenterFrame
local CenterScroll = Instance.new("ScrollingFrame"); CenterScroll.Name = "History"; CenterScroll.Size = UDim2.new(1, 0, 1, -35); CenterScroll.Position = UDim2.new(0, 0, 0, 35); CenterScroll.BackgroundTransparency = 1; CenterScroll.BorderSizePixel = 0; CenterScroll.CanvasSize = UDim2.new(0, 0, 0, 0); CenterScroll.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255); CenterScroll.Parent = CenterFrame
local CenterLayout = Instance.new("UIListLayout"); CenterLayout.Padding = UDim.new(0, 5); CenterLayout.SortOrder = Enum.SortOrder.LayoutOrder; CenterLayout.Parent = CenterScroll

-- --- Core Logic ---
local activeNotifications, idToFrameMap, groups, history, templates = {}, {}, {}, {}, {}; local nextNotifId = 1
local positions = { TopCenter = { A = Vector2.new(0.5, 0), P = UDim2.new(0.5, 0, 0, 0), D = 1 }, TopLeft = { A = Vector2.new(0, 0), P = UDim2.new(0, PADDING, 0, 0), D = 1 }, TopRight = { A = Vector2.new(1, 0), P = UDim2.new(1, -PADDING, 0, 0), D = 1 }, BottomCenter = { A = Vector2.new(0.5, 1), P = UDim2.new(0.5, 0, 1, 0), D = -1 }, BottomLeft = { A = Vector2.new(0, 1), P = UDim2.new(0, PADDING, 1, 0), D = -1 }, BottomRight = { A = Vector2.new(1, 1), P = UDim2.new(1, -PADDING, 1, 0), D = -1 } }
local animations = { Slide = function(frame, dir, posInfo) local startY = (-frame.AbsoluteSize.Y - 20) * posInfo.D; local endY = TOP_PADDING * posInfo.D; if dir == "Out" then startY, endY = endY, startY end; frame.Position = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, posInfo.P.Y.Scale, startY); return TweenInfo.new(0.4, Enum.EasingStyle.Quint, dir == "In" and Enum.EasingDirection.Out or Enum.EasingDirection.In), { Position = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, posInfo.P.Y.Scale, endY) } end, Fade = function(frame, dir, posInfo) local startPos = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, posInfo.P.Y.Scale, TOP_PADDING * posInfo.D); frame.Position = startPos; frame.Transparency = dir == "In" and 1 or 0; return TweenInfo.new(0.3), { Transparency = dir == "In" and 0 or 1 } end }

local function calculateTextHeight(text, richText) local temp = DescriptionLabel:Clone(); temp.RichText = richText; local size = TextService:GetTextSize(text, temp.TextSize, temp.Font, Vector2.new(NOTIFICATION_WIDTH - PADDING*2, 1000)); temp:Destroy(); return size.Y end
local function repositionAll() local posInfo = positions[globalConfig.Position] or positions.TopCenter; local currentY = TOP_PADDING * posInfo.D; for _, notifFrame in ipairs(activeNotifications) do local groupData = groups[notifFrame:GetAttribute("GroupID")]; if groupData and #groupData.items > 1 then notifFrame.GroupBadge.Position = UDim2.new(0.5, 0, 1, -10 - (#groupData.items - 1) * 3); notifFrame.GroupBadge.Visible = true; notifFrame.GroupBadge.GroupText.Text = "(+" .. #groupData.items - 1 .. ")" else notifFrame.GroupBadge.Visible = false end; TweenService:Create(notifFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, posInfo.P.Y.Scale, currentY) }):Play(); currentY = currentY + (notifFrame.AbsoluteSize.Y + SPACING) * posInfo.D end end
local function dismissNotification(notifFrame, swipeDirection) if not notifFrame or notifFrame:GetAttribute("IsDismissing") then return end; notifFrame:SetAttribute("IsDismissing", true); local id = notifFrame:GetAttribute("ID"); if id then idToFrameMap[id] = nil end; local groupId = notifFrame:GetAttribute("GroupID"); if groupId then groups[groupId] = nil end; for i, v in ipairs(activeNotifications) do if v == notifFrame then table.remove(activeNotifications, i); break end end; repositionAll(); local posInfo = positions[globalConfig.Position] or positions.TopCenter; local animName = globalConfig.Animation or "Slide"; local tweenInfo, props = animations[animName](notifFrame, "Out", posInfo); if swipeDirection then props.Position = UDim2.new(posInfo.P.X.Scale + (0.6 * swipeDirection), posInfo.P.X.Offset, notifFrame.Position.Y.Scale, notifFrame.Position.Y.Offset) end; local slideOut = TweenService:Create(notifFrame, tweenInfo, props); slideOut:Play(); slideOut.Completed:Wait(); notifFrame:Destroy() end

function module.Notify(data)
    if typeof(data) ~= "table" then warn("iOSNotif Error: Notify data must be a table."); return end
    if data.Template then local templateData = templates[data.Template]; if templateData then for k, v in pairs(templateData) do if data[k] == nil then data[k] = v end end end end
    local groupId = data.GroupID; if groupId and groups[groupId] then local groupData = groups[groupId]; table.insert(groupData.items, data); local masterFrame = groupData.master; masterFrame.GroupBadge.GroupText.Text = "(+" .. #groupData.items - 1 .. ")"; masterFrame.GroupBadge.Visible = true; repositionAll(); return masterFrame:GetAttribute("ID") end
    
    local newNotif = NotificationTemplate:Clone(); local notifId = nextNotifId; nextNotifId += 1; newNotif:SetAttribute("ID", notifId)
    local posInfo = positions[data.Position or globalConfig.Position] or positions.TopCenter; newNotif.AnchorPoint = posInfo.A
    local themeName = data.Theme or globalConfig.Theme or "Light"; local theme = themes[themeName] or themes.Light; newNotif.BackgroundColor3 = theme.B; newNotif.BackgroundTransparency = theme.T; newNotif.TitleLabel.TextColor3 = theme.P; newNotif.DescriptionLabel.TextColor3 = theme.P; newNotif.TimestampLabel.TextColor3 = theme.S; newNotif.ProgressBar.BackgroundColor3 = Color3.new(theme.S.r, theme.S.g, theme.S.b); newNotif.ProgressBar.ProgressFill.BackgroundColor3 = theme.P
    newNotif.TitleLabel.Text = data.Title or "Notification"; newNotif.DescriptionLabel.Text = data.Description or ""
    newNotif.TimestampLabel.Text = data.Timestamp or globalConfig.Timestamp or "now"; local useRichText = data.RichText or globalConfig.RichText or false; newNotif.DescriptionLabel.RichText = useRichText
    local duration = data.Duration or globalConfig.Duration; local soundId = data.Sound or globalConfig.Sound; if soundId and typeof(soundId) == "string" then newNotif.NotifSound.SoundId = soundId; newNotif.NotifSound:Play() end
    if data.Progress ~= nil then newNotif.ProgressBar.Visible = true; newNotif.ProgressBar.ProgressFill.Size = UDim2.new(math.clamp(data.Progress, 0, 1), 0, 1, 0) end
    if groupId then newNotif:SetAttribute("GroupID", groupId); groups[groupId] = {master = newNotif, items = {data}} end
    
    local descriptionHeight = calculateTextHeight(newNotif.DescriptionLabel.Text, useRichText); local totalHeight = PADDING + 18 + descriptionHeight + PADDING; if totalHeight < BASE_HEIGHT then totalHeight = BASE_HEIGHT end; newNotif.DescriptionLabel.Size = UDim2.new(1, -PADDING*2, 0, descriptionHeight); newNotif.Size = UDim2.new(0, NOTIFICATION_WIDTH, 0, totalHeight); newNotif.Parent = NotifGui
    
    local historyItem = newNotif:Clone(); historyItem.Visible = true; historyItem.Size = UDim2.new(1, -10, 0, totalHeight); historyItem.LayoutOrder = -tick(); historyItem.Parent = CenterScroll; table.insert(history, 1, historyItem); if #history > HISTORY_MAX then history[#history]:Destroy(); table.remove(history) end; CenterScroll.CanvasSize = UDim2.new(0, 0, 0, CenterLayout.AbsoluteContentSize.Y)
    
    local animName = data.Animation or globalConfig.Animation or "Slide"; local tweenInfo, props = animations[animName](newNotif, "In", posInfo); newNotif.Visible = true; TweenService:Create(newNotif, tweenInfo, props):Play()
    table.insert(activeNotifications, 1, newNotif); idToFrameMap[notifId] = newNotif; repositionAll()
    
    local timerPaused = false; local startTime = tick(); local isDragging = false; local startX, startPos; local mouseMoveConn, mouseUpConn
    newNotif.MouseEnter:Connect(function() timerPaused = true end); newNotif.MouseLeave:Connect(function() if not isDragging then timerPaused = false; startTime = tick() end end)
    newNotif.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then isDragging = true; timerPaused = true; startX = UserInputService:GetMouseLocation().X; startPos = newNotif.Position.X.Offset; mouseMoveConn = UserInputService.InputChanged:Connect(function(moveInput) if moveInput.UserInputType == Enum.UserInputType.MouseMovement and isDragging then newNotif.Position = UDim2.new(posInfo.P.X.Scale, startPos + (UserInputService:GetMouseLocation().X - startX), newNotif.Position.Y.Scale, newNotif.Position.Y.Offset) end end); mouseUpConn = UserInputService.InputEnded:Connect(function(endInput) if endInput.UserInputType == Enum.UserInputType.MouseButton1 then isDragging = false; timerPaused = false; startTime = tick(); if mouseMoveConn then mouseMoveConn:Disconnect() end; if mouseUpConn then mouseUpConn:Disconnect() end; local totalDelta = UserInputService:GetMouseLocation().X - startX; if math.abs(totalDelta) / newNotif.AbsoluteSize.X > SWIPE_THRESHOLD then dismissNotification(newNotif, math.sign(totalDelta)) else TweenService:Create(newNotif, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.new(posInfo.P.X.Scale, posInfo.P.X.Offset, newNotif.Position.Y.Scale, newNotif.Position.Y.Offset) }):Play() end end end) end end)
    
    coroutine.wrap(function() local timeElapsed = 0; while timeElapsed < duration do wait(0.01); if not timerPaused then timeElapsed = tick() - startTime else startTime = tick() - timeElapsed end end; if not newNotif:GetAttribute("IsDismissing") then dismissNotification(newNotif, nil) end end)()
    return notifId
end

function module.SetConfig(config) if typeof(config) == "table" then for key, value in pairs(config) do globalConfig[key] = value end else warn("iOSNotif Error: SetConfig data must be a table.") end end
function module.CreateTemplate(name, data) if typeof(name) == "string" and typeof(data) == "table" then templates[name] = data else warn("iOSNotif Error: Invalid template format.") end end
function module.Update(id, data) local notifFrame = idToFrameMap[id]; if not notifFrame or typeof(data) ~= "table" then return end; if data.Title then notifFrame.TitleLabel.Text = data.Title end; if data.Description then notifFrame.DescriptionLabel.Text = data.Description end; if data.Timestamp then notifFrame.TimestampLabel.Text = data.Timestamp end; if data.Progress ~= nil then notifFrame.ProgressBar.Visible = true; TweenService:Create(notifFrame.ProgressBar.ProgressFill, TweenInfo.new(0.2), { Size = UDim2.new(math.clamp(data.Progress, 0, 1), 0, 1, 0) }):Play() end; local useRichText = notifFrame.DescriptionLabel.RichText; if data.RichText ~= nil then useRichText = data.RichText; notifFrame.DescriptionLabel.RichText = useRichText end; if data.Theme then local theme = themes[data.Theme] or themes.Light; notifFrame.BackgroundColor3 = theme.B; notifFrame.BackgroundTransparency = theme.T; notifFrame.TitleLabel.TextColor3 = theme.P; notifFrame.DescriptionLabel.TextColor3 = theme.P; notifFrame.TimestampLabel.TextColor3 = theme.S; notifFrame.ProgressBar.BackgroundColor3 = Color3.new(theme.S.r, theme.S.g, theme.S.b); notifFrame.ProgressBar.ProgressFill.BackgroundColor3 = theme.P end; if data.Description or data.RichText ~= nil then local descriptionHeight = calculateTextHeight(notifFrame.DescriptionLabel.Text, useRichText); local totalHeight = PADDING + 18 + descriptionHeight + PADDING; if totalHeight < BASE_HEIGHT then totalHeight = BASE_HEIGHT end; notifFrame.DescriptionLabel.Size = UDim2.new(1, -PADDING*2, 0, descriptionHeight); TweenService:Create(notifFrame, TweenInfo.new(0.3), { Size = UDim2.new(0, NOTIFICATION_WIDTH, 0, totalHeight) }):Play(); repositionAll() end end
function module.Dismiss(id) local notifFrame = idToFrameMap[id]; if notifFrame then dismissNotification(notifFrame, nil) end end
function module.ToggleCenter() CenterFrame.Visible = not CenterFrame.Visible end

return module
